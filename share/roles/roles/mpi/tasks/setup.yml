- block:
    - name: "end play if no_setup"
      debug:
        msg: "nothing to do, ending play"

    - meta: end_play
  when:  no_setup|bool

#Key passed as argument and the inventory containing the nodes should be reachable
# (either as argument or in the correct folder)



# To add a new OS, simply create a {{ ansible_distribution }}Setup with the appropriate fields for
# 1-) libraries: List of names of packages to be installed
# 2-) LD_LIBRARY_PATH: Full path of the mpi library in the specified OS. That is where the library resides AFTER being installed by the package manager
#
- name: Loading os-specfic config details
  include_vars:
      file: "{{ ansible_distribution }}Setup.yml"
      name: osSetup


- name: Check that if clusterKey exists (then skip this part because this node is already setup)
  stat:
    path: ~{{ ansible_user }}/.ssh/clusterKey
  register: keyAlreadySetUp

- name: Key passing part
  #By default, clapp already puts the public key in the authorized_key of each 
  # node (so that the localhost, who has the private part can connect to the node), therefore this part only pass the private part
  # such that each node has the capability to connected to other node
  vars:
    user: "{{ ansible_user }}"
  block:



    - name: passing key
      copy:
        src: "{{ ansible_ssh_private_key_file }}" #Key should be here
        dest: ~{{ user }}/.ssh/clusterKey
        mode: '0644'
    

    - name: Ensure id_rsa exists
      file:
       path:  ~{{ user }}/.ssh/id_rsa
       state: touch

  #Blockinfile in ansible adds undisireble marker
    - name: Append key to id_rsa
      become: yes
      shell: |
        cd ~{{ user }}/.ssh/
        cat clusterKey >> ~{{ user }}/.ssh/id_rsa
        echo '\n' >>  ~{{ user }}/.ssh/id_rsa
  
  when:   use_instance_key|bool and   not keyAlreadySetUp.stat.exists


- name: Update apt
  apt:
    update_cache: yes
  



- name: basic mpi packages installation
  block:
  - name: install the required package for OpenMPI
    become: yes
    package:
      name:
        - "{{ item  }}"
      state: latest
    async: 360
    poll: 30

    loop: "{{ osSetup.libraries}}"
    register: resultMPI



  - name: Properly setting env
    script: environment.sh
    register: output


  - name: Getting gcc, make
    become: yes
    package:
      name:   build-essential
      state: present

  when: not skip_mpi|bool 















   #Aparentemente nao precisa escapar as aspas tal comando (e possiveis variacoes ) funcionam!




- name: File system setup
  vars:

#      group_name: "{{ '/' + nodes_group_name | default('') }}"
      mount_point: "~{{ user }}/efs"
      mount_owner: "ubuntu"
      mount_group: "ubuntu"
      mount_permissions: "0755"
      user: "ubuntu"
      group: "ubuntu"   
  block:  
  - name: Including efs
    include_role:
          #become_user: "ubuntu"
      name: 'ec2-efs'
      tasks_from: mount

  - name: Creates directory
    become: no
    file:
        path: ~/efs
        state: directory
        mode: "0755"

  - name: Creates mcluster directory and sets the environment variable on each node
    become: no
    file:
      path: ~/efs/{{ nodes_group_name }}
      state: directory
      mode: "0755"

#  when:  mount_ip is defined



- name: Disable firewall (shotgun approach, in the future probably properly configure)
  become: yes
  shell: ufw disable



#- name: Disable Strict Host Key Checking in SSH Config
#  lineinfile: >
#      dest=/etc/ssh/ssh_config
#      line="StrictHostKeyChecking no"
#      insertafter='EOF'
#      state=present

- name: Disable Strict Host Key Checking in SSH Config
  lineinfile:
      path: /etc/ssh/ssh_config
      line: "StrictHostKeyChecking no"
      insertafter: 'EOF'
      state: present
